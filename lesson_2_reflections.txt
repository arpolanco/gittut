What happens when you initialize a repository? Why do you need to do it?

There are no commits. You need to first add then commit the files.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
The staging area are the files to be added in your next commit. The working directory contains all the files you are working with and the repository contains all the different commits you have already made. By allowing for the user to add which files they want to add to the staging area before the commit the user can experiment and verify the current files will commit correctly and not pose a potential problem.


How can you use the staging area to make sure you have one commit per logical
change?

You can add one file to the stage area at a time per commmit to ensure each commit contains 
only one logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

By having branches keep your history organized it can allow for a cleaner more organized development and it can be a good reference to spot when a bug may have appeared or to allow for simultaenous development between different users with ease (as long as there are no conflicts)

How do the diagrams help you visualize the branch structure?

The diagrams help see how the trunk of the master branch extends foward and then seeing each branch stem from the master into their own particular entities and tie back into the master branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

The branches are tied in and the first branch then contains all the data and files from the second branch. 

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

Don't feel like doing this one.
